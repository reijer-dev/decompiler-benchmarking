package nl.ou.debm.test;

import nl.ou.debm.assessor.Assessor;
import nl.ou.debm.common.CodeMarker;
import nl.ou.debm.common.Environment;
import nl.ou.debm.common.antlr.CLexer;
import nl.ou.debm.common.antlr.CParser;
import nl.ou.debm.common.antlr.LLVMIRLexer;
import nl.ou.debm.common.antlr.LLVMIRParser;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.junit.jupiter.api.Test;

public class LoopAssessorTest {

    @Test
    public void BasicLoopAssessorTesting() throws Exception{
        final String STR_C_DECOMPILED = Environment.containerBasePath + "decoded-c.c";
        final String STR_LLVM_COMPILED = Environment.containerBasePath + "original_llvm.ll";

        var clexer = new CLexer(CharStreams.fromFileName(STR_C_DECOMPILED));
        var cparser = new CParser(new CommonTokenStream(clexer));

        var llexer = new LLVMIRLexer(CharStreams.fromFileName(STR_LLVM_COMPILED));
        var lparser = new LLVMIRParser(new CommonTokenStream(llexer));

        var info = CodeMarker.getCodeMarkerInfoFromLLVM(lparser);
        System.out.println(info.size());
        for (var item : info.entrySet()){
            System.out.println(item.getKey() + "--" + item.getValue().iNOccurrencesInLLVM + ", " + item.getValue().strLLVMFunctionNames);
        }

//        System.out.println(CodeMarker.findInGlobalDef(".str.1=privateunnamed_addrconstant[111xi8]c\"c5852db2-7acb-cba3-7f81-e7ef3cd1d3b8FF>>autoGeneratedFunctionEndMarker:true,functionName:FF_function_3,ID:150c\\00\",align1"));

//        var ltree = lparser.compilationUnit();
//        var lwalker = new ParseTreeWalker();
//        var llistener = new LoopLLVMListener();
//
//        lwalker.walk(llistener, ltree);
//
//
//        var ctree = cparser.compilationUnit();
//        var cwalker = new ParseTreeWalker();
//        var clistener = new LoopCListener();
//        cwalker.walk(clistener, ctree);

    }


    @Test
    void simulateRun() throws Exception{
        var decompiler = Environment.decompilerPath + "run-retdec.sh";
        var ass = new Assessor();
        var x = ass.RunTheTests(Environment.containerBasePath, decompiler, false);
        System.out.println("x's size: " + x.size());
    }
}
